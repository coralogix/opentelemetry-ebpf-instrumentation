version: "3.8"

services:
  kafka:
    restart: always
    container_name: kafka-like
    image: docker.io/bitnamilegacy/kafka:4.0.0
    ports:
      - "9093:9093"
    volumes:
      - "kafka-volume:/bitnami"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ENABLE_KRAFT=yes
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_KRAFT_CLUSTER_ID="13fda84d-f438-4b56-921c-9f156c809a31"

  testserver:
    build:
      context: ../..
      dockerfile: ./test/integration/components/javakafka/Dockerfile_400
    image: hatest-testserver-java-kafka
    ports:
      - "${TEST_SERVICE_PORTS}"
    depends_on:
      otelcol:
        condition: service_started
      kafka:
        condition: service_started

  obi:
    build:
      context: ../..
      dockerfile: ./test/integration/components/ebpf-instrument/Dockerfile
    volumes:
      - ./configs/:/configs
      - ./system/sys/kernel/security:/sys/kernel/security
      - ../../testoutput:/coverage
      - ../../testoutput/run-java:/var/run/beyla
    image: hatest-obi
    privileged: true # in some environments (not GH Pull Requests) you can set it to false and then cap_add: [ SYS_ADMIN ]
    network_mode: "service:testserver"
    pid: "service:testserver"
    environment:
      OTEL_EBPF_CONFIG_PATH: "/configs/obi-config.yml"
      GOCOVERDIR: "/coverage"
      OTEL_EBPF_TRACE_PRINTER: "text"
      OTEL_EBPF_OPEN_PORT: "${OTEL_EBPF_OPEN_PORT}"
      OTEL_EBPF_DISCOVERY_POLL_INTERVAL: 500ms
      OTEL_EBPF_EXECUTABLE_PATH: "${OTEL_EBPF_EXECUTABLE_PATH}"
      OTEL_EBPF_SERVICE_NAMESPACE: "integration-test"
      OTEL_EBPF_METRICS_INTERVAL: "10ms"
      OTEL_EBPF_BPF_BATCH_TIMEOUT: "10ms"
      OTEL_EBPF_LOG_LEVEL: "DEBUG"
      OTEL_EBPF_BPF_DEBUG: "TRUE"
      OTEL_EBPF_HOSTNAME: "beyla"
      OTEL_EBPF_BPF_HTTP_REQUEST_TIMEOUT: "5s"
      OTEL_EBPF_PROCESSES_INTERVAL: "100ms"
      OTEL_EBPF_TRACES_INSTRUMENTATIONS: "kafka"
      OTEL_EBPF_METRICS_INSTRUMENTATIONS: "kafka"
      OTEL_EBPF_METRICS_FEATURES: "application"
      OTEL_KAFKA_TOPIC_UUID_CACHE_SIZE: "1000"
    depends_on:
      testserver:
        condition: service_started

  # OpenTelemetry Collector
  otelcol:
    image: otel/opentelemetry-collector-contrib:0.104.0
    container_name: otel-col
    deploy:
      resources:
        limits:
          memory: 125M
    restart: unless-stopped
    command: ["--config=/etc/otelcol-config/otelcol-config.yml"]
    volumes:
      - ./configs/:/etc/otelcol-config
    ports:
      - "4317" # OTLP over gRPC receiver
      - "4318:4318" # OTLP over HTTP receiver
      - "9464" # Prometheus exporter
      - "8888" # metrics endpoint
    depends_on:
      prometheus:
        condition: service_started

  # Prometheus
  prometheus:
    image: quay.io/prometheus/prometheus:v2.55.1
    container_name: prometheus
    command:
      - --config.file=/etc/prometheus/prometheus-config.yml
      - --web.enable-lifecycle
      - --web.route-prefix=/
    volumes:
      - ./configs/:/etc/prometheus
    ports:
      - "9090:9090"

  jaeger:
    image: jaegertracing/all-in-one:1.57
    ports:
      - "16686:16686" # Query frontend
      - "4317" # OTEL GRPC traces collector
      - "4318" # OTEL HTTP traces collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
      - LOG_LEVEL=debug
    volumes:
      - ./configs/jaeger-ui-config.json:/etc/jaeger/ui-config.json
    command: ["--query.ui-config=/etc/jaeger/ui-config.json"]

volumes:
  kafka-volume:
